name: Test Workflow
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
env:
  home: /home/runner
  build: 'true'

jobs:
  build:
    name: Environment Build
    runs-on: ubuntu-latest
    outputs:
      docker_sha: ${{ steps.dockerfile_sha.outputs.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Ensure Cache Directory Exists
        run: mkdir -p /tmp/.buildx-cache

      - name: Get Dockerfile SHA
        id: dockerfile_sha
        run: |
          echo "sha=$(sha256sum .github/Dockerfile | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
        shell: bash
        continue-on-error: true

      - name: Cache Docker layers
        id: cache-docker-layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.dockerfile_sha.outputs.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Check if Dockerfile has changed
        id: dockerfile_changed
        run: |
          if [[ "${{ steps.cache-docker-layers.outputs.cache-hit }}" == "true" ]]; then
            echo "build=false" >> $GITHUB_ENV
          else
            echo "build=true" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Build Docker image
        if: env.build == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .github/Dockerfile
          push: false
          tags: minirt_env:latest
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: List files for cache
        run: ls -la /tmp/.buildx-cache

      - name: Save Docker image to file
        if: env.build == 'true'
        run: docker save -o minirt_env.tar minirt_env:latest

      - name: Cache Docker image
        if: env.build == 'true'
        uses: actions/cache@v4
        with:
          path: minirt_env.tar
          key: ${{ runner.os }}-docker-image-${{ steps.dockerfile_sha.outputs.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-image-

  compilation_test:
    name: Compilation Test
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
    steps:
      - name: Checkout source branch of pull request
        uses: actions/checkout@v4
      - name: Restore Docker image from cache
        uses: actions/cache@v4
        with:
          path: minirt_env.tar
          key: ${{ runner.os }}-docker-image-${{ needs.build.outputs.docker_sha }}
          restore-keys: |
            ${{ runner.os }}-docker-image-
      - name: List files for debugging
        run: ls -la
      - name: Load Docker image from file
        run: docker load -i minirt_env.tar
      - name: ðŸ”¨ Compile with Makefile
        run: docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace minirt_env:latest make CC="${{ matrix.compiler }}"
